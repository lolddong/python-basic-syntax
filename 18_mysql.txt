데이터 베이스
    - 엑셀과 유사한 구조
    - 관계형 데이터베이스 (RDB, Relational Database) 
    - 예) Oracle, mysql, postgres
    - mysql database server의 계층 구조
        - mysql database server > 스키마 n개 > 테이블 n개
    - CRUD: 추가, 조회, 수정, 삭제를 의미하는 IT 전반의 용어

IP 프로토콜의 한계
    - 패킷을 받을 대상서버가 불능이거나, 중간에 패킷이 소실될 수가 있음 (비연결성)
    - 패킷의 순서가 보장되지 않음

mysql 및 WorkBench 설지
    - docker run --name board_mysql -e MYSQL_ROOT_PASSWORD=1234 -d -p 3406:3306 mysql
    - 원래는 "docker run --name board_mysql -e MYSQL_ROOT_PASSWORD=1234 -d -p 3306:3306 mysql"
    인데 학원에서는 공용컴퓨터이다 보니 다른 사람이 그 컴퓨터에 docker가 아닌 컴퓨터에 이미 깔아놓아서 같은 이름으로 설치하지 못하게 하는 것 --> 그래서 3306을 3406으로 변환해서 설치했음
    - 3406으로 했어도 껍데기만 3406으로 저장해놨을 뿐 안에서는 3306으로 인식 될 것임. 왜냐하면 mysql개발자가 최초에 만들 때 3306으로 만들었기 때문임



docker 컨테이너 내부로 접속
    - docker ps -a
    - docker start 컨테이너ID
    - docker exec -it 컨테이너ID(또는 컨테이너명)) mysql -u root -p 1234*****
        - 여기서 -p 다음을 입력하지 않고 enter 누르기 
        - 왜냐하면 history보면 다른 사람이 볼 수도 있기 때문
        - *****빼고 enter 누른 다음 enter password: 뜨면 1234 입력하고 enter
    - -u : user
    - -p : password

SQL 명령어
    - 모든 SQL 반드시 ;으로 끝맺음
    - 데이터베이스 == 스키마
    - 목록조회
        - SHOW databases;
            - 데이터베이스(스키마)의 목록조회
        - SHOW tables;
            - 테이블의 목록조회
    - 데이터베이스(스키마) 생성
        - CREATE DATABASE 스키마명
    - 데이터베이스(스키마) 삭제
        - DROP DATABASE 스키마명
    - 테이블 생성
        - USE 스키마명
        - CREATE TABLE 테이블명(id INT);
    - 테이블의 spec(속성) 조회
        - DESCRIBE 테이블명
    - 테이블 삭제
        - DROP TABLE 테이블명
        - if 문 사용 가능:
            - DROP TABLE IF EXISTS 테이블명;
    - 테이블 값만 전부 삭제
        - TRUNCATE TABLE 테이블명
        - = DELETE FROM 테이블명 (전부 다 지울때)
        - TRUNCATE가 DELETE보다 속도 더 빠름
    - PK 지정
        - , PRIMARY KEY (필드명)
            - 테이블 생성/수정시 맨 끝에 씀
            - 예) CREATE TABLE author(id BIGINT, name VARCHAR(20), ... , PRIMARY KEY(id));
    - 자동으로 숫자 올림순으로 매겨짐 
        - AUTO_INCREMENT
            - 테이블 생성/수정시 필드타입 뒤에 씀
            - 이것을 사용할 시 이 테이블의 PK는 무조건 이 필드만 할 수 있음.
            - 예) CREATE TABLE author(id INT auto_increment, ...
        - AUTO_INCREMENT 다시 세팅 시
            - 만약 테이블을 만들고 데이터 입력 후 삭제한 후 id value 숫자를 세팅하고 싶을 때:
            - DELETE FROM author WHERE id >= 10;
            - AUTO_INCREMENT 를 다시 세팅해주면 된다;
            - ALTER TABLE author AUTO_INCREMENT = 8;
    - 날짜와 시간
        - DATETIME -> 자동생성 됨
            - 테이블 생성/수정시 필드타입에 씀
            - 예) CREATE TABLE author(created_at DATETIME);
            - 'YYYY-MM-DD Hr:Min:Sec'로 출력됨
                - 예) '2023-06-05 시간:분:초'
        - DATETIME INSERT 방법!
            - 테이블 생성/수정시 필드타입에 씀
            - 덮어쓰기: '2022-06-05' 하면 시간은 자동으로 00:00:00으로 됨, '2022-06-05 05:00:00'
    - 비면 안 되는 것
        - NOT NULL
            - 테이블 생성/수정시 필드타입 뒤에 씀
            - 예) CREATE TABLE author(email VARCHAR(40) NOT NULL, ...);
    - 유일무이해야하는 옵션
        - Unique
            - 테이블 생성/수정시 필드타입 뒤에 씀
    - 조건 걸기
        - WHERE ~
            - WHERE 컬럼명 > 컬럼값
            - WHERE 컬럼명 = 컬럼값

용어
    - table의 구조
        - 열(column) = 필드(field) = 속성    -> 컬럼 정보 바꿀께요~ 라고 하면 DDL로 alter table 하는 것
        - 행(row) = 데이터 = 레코드    -> 데이터 추가할께요~ 하고 하면 DML로 행을 추가하는 것
        - 값(value)
        - 키(key) = 행의 식별자
            - PRIMARY KEY (PK) = 테이블에 저장된 레코드를 고유하게 식별하는 컬럼/key
                - Not Null + Unique
                - PK 설정 시: ... , PRIMARY KEY (필드명)
                    - 예) create table post(id BIGINT AUTO_INCREMENT, title VARCHAR(30), contents VARCHAR(255), author_id BIGINT, PRIMARY KEY(id));
            - FOREIGN KEY (FK) = 두 테이블을 연결하는 데 사용하는 컬럼/key
                - FK 설정 시: ... , FOREIGN KEY (필드명) REFERENCES 다른테이블명(다른테이블의필드명)
                    - 예) create table post(id BIGINT AUTO_INCREMENT, title VARCHAR(30), contents VARCHAR(255), author_id BIGINT, PRIMARY KEY(id), FOREIGN KEY (author_id) REFERENCES author(id));
                - FK를 걸면 새테이블의 필드값은 reference하는 테이블의 필드에 있어야 입력 가능
                    create table post(id BIGINT AUTO_INCREMENT, title VARCHAR(30), contents VARCHAR(255), author_id BIGINT, PRIMARY KEY(id));
                    insert into post(title, contents, author_id) values ('hello', 'hello is ...', 100);
                    insert into post(title, contents, author_id) values('hello', 'hello is ...', 1);
                    >> Query OK --> 잘 들어감

                    create table post(id BIGINT AUTO_INCREMENT, title VARCHAR(30), contents VARCHAR(255), author_id BIGINT, PRIMARY KEY(id), FOREIGN KEY (author_id) REFERENCES author(id));
                        - references에 author_id가 없으면 안 만들어진다!!!
                    insert into post(title, contents, author_id) values ('hello', 'hello is ...', 100);
                    >> ERROR ... foreign key constraint fails --> 에러 남: post의 author_id = 100 이 author의 id에 없기 때문
                    insert into post(title, contents, author_id) values('hello', 'hello is ...', 1);
                    >> Query OK --> 잘 들어감: post의 author_id = 1 이 author의 id에 있기 때문
    - table의 특성
        - field = 열
        - type = 속성    -> 예) INT, VARCHAR(크기), etc.
        - NULL = 비어있는 값을 의미    -> YES 이면 비어있어도 된다는 의미
            - 컬럼 생성시 별다른 null관련 옵션을 주지 않으면 기본적으로 nullable.
    - 필드 타입
        - INT = 정수, 4바이트 할당 (4바이트는 20-40억까지 표현 가능)
        - BIGINT = 정수, 8바이트 할당
        - VARCHAR(최대허용숫자)
    - *
        - all
    - 문자열은 쌍따음표가 아닌 따음표로 감싼다 (')
    - #
        - 주석
        - 주석 뒤에 오는 문장은 컴퓨터가 안 읽음
        - 예) # select * from author
              select * from author where id >= 3 AND name = 'hong';
              >> 두번째 줄만 실행됨
    - ㄴㄷ

mysql 연산자
    - mysql에서는 ==이 없음
    - 같지 않다
        - !=, <>
    - <=, =, >=
    - IS NULL, IS NOT NULL: 비어 있거나 비어있지 않거나
        - SELECT * FROM 테이블명 WHERE 컬럼명 IS NULL;
    - IN (값), NOT IN (값)
        - SELECT * FROM 테이블명 WHERE 컬럼명 IN (값1, 값2, 값3)
            - 예) SELECT * FROM author WHERE id IN (1, 3, 5);
        - table간 데이터값 공유할 때;
            - SELECT * FROM 테이블명1 WHERE 테이블1의컬럼명1 IN (SELECT 테이블2의컬럼명1 from 테이블2);
                - 예) SELECT * FROM author WHERE id IN (SELECT author_id FROM post);
    - 포함 연산 방식
        - 10 < 컬럼명 AND 컬럼명 > 5    --> 파이썬처럼 5 < 값 < 10 안됨
        - WHERE 컬럼명 BETWEEN min and max

논리 연산자
    - AND &&
    - OR ||
    - NOT !

명명
    - my_sql에서 두단어가 결합된 컬럼면을 지정할땐 보통 a단어_b단어   -> _ 사용



dmbs (Data Management System)
    - NOTE: 
        - 쿼리문은 관용적으로 대문자 사용(대소문자구문X)
        - 테이블명, 컬럼명은 대소문자를 구분함
        - 관계형데이터베이스 (RDB) 라고도 부른다: 서로 관계를 갖는 데이터들의 집합
    - DDL (Data Definition Lang): 테이블/컬럼 정의/변경하는 명령어
        - CREATE TABLE 테이블명(필드이름1 필드타입1, 필드이름2 필드타입2, ...)
            - 생성
            - 예) CREATE TABLE author(id INT, name VARCHAR(10), email VARCHAR(20));
        - ALTER TABLE 테이블명
            - 수정 (TABLE 구성변경)
            - ALTER TABLE 테이블명 RENAME 새로운테이블명;
                - 테이블명 변경
                - 예) ALTER TABLE author RENAME member;
            - ALTER TABLE 테이블명 RENAME COLUMN 변경대상컬럼명 TO 새로운컬럼명;
                - 컬럼명 변경
                - 예) ALTER TABLE author RENAME COLUMN pw TO password;
            - ALTER TABLE 테이블명 ADD COLUMN 새로운필드명 필드타입;
                - 컬럼 추가
                - 예) ALTER TABLE author ADD COLUMN updated_at DATETIME;
            - ALTER TABLE 테이블명 MODIFY COLUMN 필드명 필드타입 추가옵션
                - 컬럼 옵션 덮어 붙여쓰기
                - 예) ALTER TABLE author MODIFY COLUMN created_at DATETIME DEFAULT CURRENT_TIMESTAMP;
            - ALTER TABLE 테이블명 DROP COLUMN 삭제할컬럼명;
                - 컬럼 삭제
        - DROP TABLE 테이블명
            - 삭제
    - DML (Data Manipulation Lang): 데이터 조회/추가/수정/삭제
        - SELECT 컬럼/필드명 FROM 테이블명 WHERE 조건
            - 조회
            - 필드명을 명시해도 되고, *을 통해 모든 컬럼 조회도 가능
            - 조건이 없으면 모든 data 조회
            - LIMIT 숫자 옵션을 주면 제한된 데이터만 조회
            - 예) SELECT * FROM author;
            - 예) SELECT name, email FROM author;
            - 예) SELECT name, email FROM author LIMIT 1;

        - INSERT INTO 테이블명(필드명1, 필드명2, 필드명3 ...) values (데이터값1, 데이터값2, 데이터값3 ...);      -> 필드타입 넣을 필요 없음
            - 추가
            - 예) INSERT INTO author(id, name, email) values (1, 'leo', 'leo@gmail.com');
        - UPDATE 테이블명 SET 필드명1 = 수정값1, 필드명2 = 수정값2 WHERE 필드명 = 데이터값;
            - 수정
            - 조건이 없으면 다 바꿈 (조심해야 함)
            - 예) UPDATE author SET email = 'pearl.ahn@gmail.com' WHERE id = '2';
        - DELETE FROM 테이블명 WHERE 필드명 = 데이터값;
            - 삭제
            - 삭제 후 복구 가능 (TRUNCATE는 복구 불가)
            - 한 row 전체를 지우기 때문에 컬럼명이나 *를 지정해줄 필요 없다
            - 조건을 빼버리면 테이블 전체를 지움 (조심해야 됨))
            - DELETE FROM author WHERE id >= 10;
            alter table author auto_increment = 8
    - DCL (Data Control Lang): 사용자 권한 관리
        - 계정 생성 후 권한부여


